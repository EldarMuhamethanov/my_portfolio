---
import { Badge } from '../../components/ui/badge'
import BaseLayout from '../../layouts/BaseLayout.astro'

import { PROJECTS } from '../../lib/constants'

export async function getStaticPaths() {
  return [{ params: { id: 'smart-portal' } }, { params: { id: 'markup' } }]
}

const { id } = Astro.params

const project = PROJECTS.find((project) => project.id === id)

if (!project) {
  return Astro.redirect('/404')
}
---

<BaseLayout
  title={`Project ${project.name}`}
  description={project.shortDescription}
>
  <article class="mx-auto max-w-6xl px-4 py-12">
    <header class="mb-16 text-center">
      <h1
        class="mb-6 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-6xl font-bold text-transparent"
      >
        {project.name}
      </h1>
      <p
        class="mx-auto mb-8 max-w-2xl text-xl leading-relaxed text-muted-foreground"
      >
        {project.shortDescription}
      </p>

      <div class="flex flex-wrap justify-center gap-4">
        {
          project.site && (
            <a
              href={project.site}
              target="_blank"
              rel="noopener noreferrer"
              class="group inline-flex transform items-center gap-2 rounded-full bg-gradient-to-r from-primary to-purple-600 px-8 py-3 text-white transition-all hover:scale-105 hover:shadow-lg hover:shadow-primary/25"
            >
              Посетить сайт
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 transition-transform group-hover:translate-x-1"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                  clip-rule="evenodd"
                />
              </svg>
            </a>
          )
        }

        {
          project.githubUrl && (
            <a
              href={project.githubUrl}
              target="_blank"
              rel="noopener noreferrer"
              class="group inline-flex transform items-center gap-2 rounded-full border-2 border-gray-200 bg-background px-8 py-3 text-foreground transition-all hover:scale-105 hover:border-primary hover:shadow-lg dark:border-gray-800"
            >
              GitHub
              <svg
                class="h-5 w-5 transition-transform group-hover:rotate-12"
                fill="currentColor"
                viewBox="0 0 24 24"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z"
                  clip-rule="evenodd"
                />
              </svg>
            </a>
          )
        }
      </div>
    </header>

    <section class="mb-16 rounded-2xl bg-muted/50 p-8 backdrop-blur-sm">
      <h2 class="mb-8 text-center text-3xl font-bold">Технологический стек</h2>
      <div class="flex flex-wrap justify-center gap-3">
        {
          project.stack.map((tech) => (
            <Badge
              variant="outline"
              className="border-2 px-4 py-2 text-base transition-colors hover:border-primary hover:bg-primary hover:text-primary-foreground"
            >
              {tech}
            </Badge>
          ))
        }
      </div>
    </section>

    {
      project.description.length && (
        <section class="relative mb-16">
          <div class="absolute inset-0 rounded-3xl bg-gradient-to-b from-primary/5 to-transparent" />
          <div class="relative rounded-3xl border border-primary/10 bg-card p-12 shadow-xl">
            <h2 class="mb-8 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-center text-4xl font-bold text-transparent">
              Описание проекта
            </h2>
            <div class="prose prose-lg dark:prose-invert prose-headings:text-primary prose-p:text-foreground/90 max-w-none">
              {project.description.map((block) => {
                switch (block.type) {
                  case 'header':
                    return block.level === 1 ? (
                      <h1 class="mb-6 text-3xl font-bold">{block.text}</h1>
                    ) : block.level === 2 ? (
                      <h2 class="mb-4 text-2xl font-semibold">{block.text}</h2>
                    ) : (
                      <h3 class="mb-3 text-xl font-semibold">{block.text}</h3>
                    )
                  case 'paragraph':
                    return (
                      <p class="mb-6 text-lg leading-relaxed">{block.text}</p>
                    )
                  case 'list':
                    return (
                      <ul class="mb-6 list-disc space-y-3 pl-6">
                        {block.items.map((item) => (
                          <li class="text-lg">{item}</li>
                        ))}
                      </ul>
                    )
                  default:
                    return null
                }
              })}
            </div>
          </div>
        </section>
      )
    }

    <section class="mb-16">
      <h2 class="mb-8 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-center text-4xl font-bold text-transparent">
        Галерея проекта
      </h2>
      <div
        class="grid auto-rows-[400px] grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3"
        id="gallery"
      >
        {
          project.photos.slice(1).map((photo, index) => (
            <div class="group relative cursor-zoom-in overflow-hidden rounded-2xl bg-muted shadow-lg transition-all duration-300 hover:shadow-2xl">
              <img
                src={photo}
                alt={`${project.name} screenshot ${index + 1}`}
                class="h-full w-full transform object-cover object-center transition-transform duration-500 group-hover:scale-110"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100">
                <div class="absolute bottom-6 left-6 text-white">
                  <p class="text-lg font-medium">Скриншот {index + 1}</p>
                  <p class="text-sm text-gray-200">Нажмите для увеличения</p>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </section>

    <div
      id="imageModal"
      class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-90"
    >
      <button
        id="modalCloseButton"
        class="absolute right-4 top-4 text-white hover:text-gray-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-8 w-8"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <button
        id="prevButton"
        class="absolute left-4 text-white hover:text-gray-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-8 w-8"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button
        id="nextButton"
        class="absolute right-4 text-white hover:text-gray-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-8 w-8"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <img
        id="modalImage"
        src=""
        alt="Enlarged view"
        class="max-h-[90vh] max-w-[90vw] object-contain"
      />
    </div>
  </article>
</BaseLayout>

<script define:vars={{ project }}>
  let currentIndex = 0
  const photos = project.photos.slice(1)
  const modal = document.getElementById('imageModal')
  const modalImage = document.getElementById('modalImage')
  const prevButton = document.getElementById('prevButton')
  const nextButton = document.getElementById('nextButton')
  const closeButton = document.getElementById('modalCloseButton')
  const gallery = document.getElementById('gallery')

  const images = gallery.querySelectorAll('.group.relative img')
  images.forEach((img, index) => {
    const container = img.closest('.group.relative')
    container.addEventListener('click', () => openModal(index))
  })

  const openModal = (index) => {
    if (!modalImage || !modal) {
      return
    }
    currentIndex = index
    modalImage.src = photos[currentIndex]
    modal.classList.remove('hidden')
    document.body.style.overflow = 'hidden'
  }

  const closeModal = () => {
    if (!modal) return
    modal.classList.add('hidden')
    document.body.style.overflow = 'auto'
  }

  const prevImage = () => {
    currentIndex = (currentIndex - 1 + photos.length) % photos.length
    if (modalImage) {
      modalImage.src = photos[currentIndex]
    }
  }

  const nextImage = () => {
    currentIndex = (currentIndex + 1) % photos.length
    if (modalImage) {
      modalImage.src = photos[currentIndex]
    }
  }

  closeButton?.addEventListener('click', closeModal)
  prevButton?.addEventListener('click', prevImage)
  nextButton?.addEventListener('click', nextImage)

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') closeModal()
    if (e.key === 'ArrowLeft') prevImage()
    if (e.key === 'ArrowRight') nextImage()
  })

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) closeModal()
  })
</script>

<style>
  .prose {
    max-width: 65ch;
    margin: 0 auto;
  }

  .cursor-zoom-in {
    cursor: zoom-in;
  }
</style>
